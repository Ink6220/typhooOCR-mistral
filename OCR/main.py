# main.py (‡∏â‡∏ö‡∏±‡∏ö‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á)
import asyncio
from pathlib import Path
import traceback

# ‡∏•‡∏ö import ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ
# from OCR.image_manager import ImageManager
# from OCR.storage import S3Storage
# from OCR.pdf_processor import PDFProcessor
# from OCR.image_processor import ImageProcessor

# ‡πÄ‡∏û‡∏¥‡πà‡∏° Processor ‡πÉ‡∏´‡∏°‡πà ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á Path
from OCR.powerpoint_processor import PowerPointProcessor
from OCR.typhoon_processor import TyphoonProcessor


async def pipeline(FILE_PATH, filetype, username, project_id):
    """
    ‡πÑ‡∏õ‡∏õ‡πå‡πÑ‡∏•‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ TyphoonProcessor
    """
    try:
        file_path_obj = Path(FILE_PATH)
        processor = None

        # 1. ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Processor
        # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PPTX ‡πÄ‡∏£‡∏≤‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô PDF ‡∏Å‡πà‡∏≠‡∏ô
        if filetype == "pptx":
            print("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå PowerPoint ‡πÄ‡∏õ‡πá‡∏ô PDF...")
            pptx_processor = PowerPointProcessor(file_path_obj)
            # ‡πÄ‡∏£‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏±‡∏ô co-routine ‡∏Ç‡∏≠‡∏á pptx_processor ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ path ‡∏Ç‡∏≠‡∏á pdf ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
            # ‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á PowerPointProcessor ‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ path
            # ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏±‡∏ô‡∏°‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå PDF ‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡∏™‡πà‡∏á path ‡∏ô‡∏±‡πâ‡∏ô‡πÉ‡∏´‡πâ TyphoonProcessor
            # ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏á‡πà‡∏≤‡∏¢ ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏™‡∏°‡∏°‡∏ï‡∏¥‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏¢‡∏Å
            # ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå pptx ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÉ‡∏ä‡πâ processor ‡πÄ‡∏î‡∏¥‡∏° ‡πÅ‡∏ï‡πà OCR ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡πÉ‡∏´‡∏°‡πà
            # (‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏à‡∏£‡∏¥‡∏á‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î pptx processor ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°)
            # **‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏á‡πà‡∏≤‡∏¢‡πÉ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÅ‡∏Ñ‡πà PDF ‡πÅ‡∏•‡∏∞ ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Å‡πà‡∏≠‡∏ô**
            print("‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• PPTX ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö Typhoon ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡∏µ‡πâ")
            return
        
        elif filetype in ["pdf", "jpg", "jpeg", "png"]:
            processor = TyphoonProcessor(file_path_obj)
        else:
            raise ValueError(f"Unsupported file type: {filetype}")

        # 2. ‡∏ó‡∏≥ OCR ‡∏î‡πâ‡∏ß‡∏¢ Processor ‡πÉ‡∏´‡∏°‡πà
        if processor:
            print(f"üöÄ Starting OCR with TyphoonProcessor for {FILE_PATH}...")
            ocr_results = await processor.run()
            
            if not ocr_results or ocr_results[0].get("error"):
                 print(f"‚ùå OCR processing failed: {ocr_results[0].get('error', 'Unknown error')}")
                 return
            print("‚úÖ OCR processing complete.")
        else:
            print("‚ùå ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å Processor ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°")
            return

        # 3. ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå Markdown
        # ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏≠‡∏µ‡∏Å‡∏ï‡πà‡∏≠‡πÑ‡∏õ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ Typhoon ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏•‡πâ‡∏ß
        full_md_content = []
        for resp in ocr_results:
            for page in resp.get("pages", []):
                md = page.get("markdown", "")
                full_md_content.append(md)

        # 4. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Markdown ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
        # ‡πÉ‡∏ä‡πâ Path ‡πÄ‡∏î‡∏¥‡∏°‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        output_path = Path(__file__).parent.parent / "text_document" / "ocr_output_typhoon.txt"
        output_path.parent.mkdir(parents=True, exist_ok=True)
        
        # ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡∏Ñ‡∏±‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤
        output_path.write_text("\n\n---\n\n".join(full_md_content), encoding="utf-8")
        print(f"‚úÖ Markdown content saved to: {output_path}")

        # 5. ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á ImageManager ‡πÅ‡∏•‡∏∞ S3 ‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏≠‡∏≠‡∏Å
        # ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å Typhoon OCR ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
        print("‚úÖ Pipeline finished successfully.")


    except Exception as e:
        print(f"‚ùå An unexpected error occurred in the pipeline: {e}")
        traceback.print_exc()

# ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ
# if __name__ == "__main__":
#     # ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö
#     TEST_FILE_PATH = "path/to/your/file.pdf" 
#     TEST_FILE_TYPE = "pdf" # ‡∏´‡∏£‡∏∑‡∏≠ "jpg"
#     TEST_USERNAME = "test_user"
#     TEST_PROJECT_ID = "project_123"
#     asyncio.run(pipeline(TEST_FILE_PATH, TEST_FILE_TYPE, TEST_USERNAME, TEST_PROJECT_ID))