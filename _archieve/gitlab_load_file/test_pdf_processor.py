import os
from pathlib import Path
from datetime import datetime
import pytz
import sys

# ‡πÄ‡∏û‡∏¥‡πà‡∏° path ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ import ‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å‡πÑ‡∏î‡πâ
parent_dir = str(Path(__file__).parent.parent)
if parent_dir not in sys.path:
    sys.path.append(parent_dir)

# Import ‡πÇ‡∏°‡∏î‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
try:
    from langchain.text_splitter import RecursiveCharacterTextSplitter
    from langchain_community.document_loaders import PyMuPDFLoader
except ImportError:
    print("‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á langchain ‡πÅ‡∏•‡∏∞ pymupdf ‡∏Å‡πà‡∏≠‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: pip install langchain langchain-community pymupdf")
    sys.exit(1)

# ‡∏ô‡∏¥‡∏¢‡∏≤‡∏° MetadataPinecone class
from pydantic import BaseModel

class MetadataPinecone(BaseModel):
    project_id: str
    filename: str
    page: str
    text: str
    date_upload: str
    upload_by: str

def process_pdf(file_path, username, project_id, date_upload):
    """‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÑ‡∏ü‡∏•‡πå PDF ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á metadata"""
    print(f"üìÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• PDF: {file_path}")
    
    try:
        # ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡πÅ‡∏¢‡∏Å‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ PDF
        loader = PyMuPDFLoader(file_path)
        documents = loader.load()
        
        # ‡πÅ‡∏¢‡∏Å‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏¥‡πâ‡∏ô‡πÄ‡∏•‡πá‡∏Å‡πÜ
        text_splitter = RecursiveCharacterTextSplitter(chunk_size=1000, chunk_overlap=200)
        split_docs = text_splitter.split_documents(documents)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á MetadataPinecone objects
        results = []
        for i, doc in enumerate(split_docs):
            metadata = MetadataPinecone(
                project_id=project_id,
                filename=os.path.basename(file_path),
                page=f"page_{doc.metadata.get('page', i+1)}",
                text=doc.page_content,
                date_upload=date_upload,
                upload_by=username
            )
            results.append(metadata)
        
        print(f"‚úÖ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• PDF ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: {len(results)} ‡∏ä‡∏¥‡πâ‡∏ô")
        return results
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• PDF: {e}")
        return []

def create_test_files():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå PDF"""
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå test_files ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
    test_dir = Path("./test_files")
    test_dir.mkdir(exist_ok=True)
    
    # ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å PDF ‡∏à‡∏≤‡∏Å‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å
    pdf_source_dir = Path("../pdf_files")
    if pdf_source_dir.exists():
        import shutil
        pdf_files = list(pdf_source_dir.glob("*.pdf"))
        if pdf_files:
            for pdf_file in pdf_files[:2]:  # ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡πÄ‡∏û‡∏µ‡∏¢‡∏á 2 ‡πÑ‡∏ü‡∏•‡πå
                shutil.copy(pdf_file, test_dir / pdf_file.name)
                print(f"üìã ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å {pdf_file.name} ‡πÑ‡∏õ‡∏¢‡∏±‡∏á {test_dir}")
        else:
            print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå PDF ‡πÉ‡∏ô {pdf_source_dir}")
    else:
        print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå {pdf_source_dir}")
    
    return test_dir

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö PDF Processor...")
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    test_dir = create_test_files()
    
    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå
    username = "test_user"
    project_id = "test_project_pdf"
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á timestamp
    th_timezone = pytz.timezone('Asia/Bangkok')
    th_time = datetime.now(th_timezone)
    date_upload = str(th_time.strftime('%Y-%m-%d %H:%M:%S') + ' (Asia/Bangkok)')
    
    # ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• PDF ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    all_results = []
    for file_path in test_dir.glob("*.pdf"):
        results = process_pdf(str(file_path), username, project_id, date_upload)
        all_results.extend(results)
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    print(f"\n‚úÖ ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: {len(all_results)} ‡∏ä‡∏¥‡πâ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    if all_results:
        sample = all_results[0]
        print("\nüìù ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:")
        print(f"  üìÑ ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå: {sample.filename}")
        print(f"  üìÉ ‡∏´‡∏ô‡πâ‡∏≤: {sample.page}")
        print(f"  üîë ‡∏£‡∏´‡∏±‡∏™‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Ñ: {sample.project_id}")
        print(f"  üë§ ‡∏ú‡∏π‡πâ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î: {sample.upload_by}")
        print(f"  üïí ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î: {sample.date_upload}")
        print(f"  üìã ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ (‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á): {sample.text[:100]}...")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏î‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
        if len(all_results) > 1:
            print("\nüîç ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏¥‡πâ‡∏ô‡∏ó‡∏µ‡πà 2 (‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÄ‡∏ï‡πá‡∏°):")
            print(f"{all_results[1].text}")
    else:
        print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå PDF ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏î‡∏™‡∏≠‡∏ö")

if __name__ == "__main__":
    main()
