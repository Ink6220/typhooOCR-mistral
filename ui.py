import gradio as gr
import requests
import re
import base64
from io import BytesIO

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏à‡∏£‡∏¥‡∏á
def chat_with_api(message, history):
    try:
        # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API
        params = {
            "user_query": message,
            "top_k": 10,
            "top_rerank": 3,
            "alpha": 0.7
        }
        
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏ú‡πà‡∏≤‡∏ô GET request
        response = requests.get(
            "http://localhost:8000/generate-hybrid",
            params=params,
            timeout=30
        )
        
        if response.status_code == 200:
            # ‡∏ñ‡πâ‡∏≤ API ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô JSON
            try:
                result = response.json()
                # ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ generated_answer
                reply = result.get("generated_answer", str(result))
                
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å S3
                reply_with_images = process_images_in_text(reply)
                
            except:
                # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà JSON ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ text
                reply_with_images = response.text
        else:
            reply_with_images = f"API Error: {response.status_code} - {response.text}"
            
    except requests.exceptions.ConnectionError:
        reply_with_images = "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö API ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ API server ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà port 8000"
    except requests.exceptions.Timeout:
        reply_with_images = "API ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"
    except Exception as e:
        reply_with_images = f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}"
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏ô history
    history.append([message, reply_with_images])
    return "", history

def process_images_in_text(text):
    """‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏π‡∏õ‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å S3"""
    # ‡∏´‡∏≤ pattern ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° ‡πÄ‡∏ä‡πà‡∏ô [Image: filename.jpg](filename.jpg)
    image_pattern = r'\[Image:\s*([^\]]+)\]\(([^)]+)\)'
    
    def replace_image(match):
        image_description = match.group(1)
        image_filename = match.group(2)
        
        try:
            # ‡∏î‡∏∂‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å S3 ‡∏ú‡πà‡∏≤‡∏ô API
            image_url = get_image_from_s3(image_filename)
            if image_url:
                # ‡πÉ‡∏ä‡πâ HTML img tag ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏π‡∏õ
                return f'\n\n<img src="{image_url}" alt="{image_description}" style="max-width: 400px; max-height: 300px; border-radius: 8px; margin: 10px 0;"/>\n\n'
            else:
                return f"\n\nüñºÔ∏è ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û: {image_description} (‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏î‡πâ)\n\n"
        except Exception as e:
            return f"\n\nüñºÔ∏è ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û: {image_description} (Error: {str(e)})\n\n"
    
    # ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà pattern ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    processed_text = re.sub(image_pattern, replace_image, text)
    return processed_text

def get_image_from_s3(image_filename):
    """‡∏î‡∏∂‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å S3 ‡∏ú‡πà‡∏≤‡∏ô API endpoint ‡πÅ‡∏ö‡∏ö binary"""
    try:
        # ‡∏•‡∏ö‡∏™‡πà‡∏ß‡∏ô extension ‡πÅ‡∏•‡∏∞ path ‡∏´‡∏≤‡∏Å‡∏°‡∏µ
        filename = image_filename.split('/')[-1]  # ‡πÄ‡∏≠‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå
        filename = filename.rsplit('.', 1)[0]     # ‡∏•‡∏ö extension
        
        # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏õ‡πá‡∏ô binary
        response = requests.get(
            f"http://localhost:8000/get-image-binary/{filename}",
            timeout=30
        )
        
        if response.status_code == 200:
            # ‡πÅ‡∏õ‡∏•‡∏á binary ‡πÄ‡∏õ‡πá‡∏ô base64 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô HTML
            image_base64 = base64.b64encode(response.content).decode('utf-8')
            return f"data:image/jpeg;base64,{image_base64}"
        else:
            print(f"Failed to get image binary for {filename}: {response.status_code}")
            return None
            
    except Exception as e:
        print(f"Error getting image from S3: {e}")
        return None

# ‡∏™‡∏£‡πâ‡∏≤‡∏á UI chatbot
with gr.Blocks(title="üí¨ Hybrid API Chatbot") as demo:
    gr.Markdown("# üí¨ Hybrid API Chatbot")
    gr.Markdown("‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö API Hybrid Search ‡∏ö‡∏ô localhost:8000")
    
    chatbot = gr.Chatbot(height=400, type="tuples")
    msg = gr.Textbox(label="‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°", placeholder="‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà...")
    clear = gr.Button("‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥")
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ state ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤
    history_state = gr.State([])
    
    def respond(message, history):
        return chat_with_api(message, history)
    
    msg.submit(respond, [msg, history_state], [msg, chatbot])
    clear.click(lambda: ([], []), None, [history_state, chatbot])

demo.launch(debug=True, share=False)
